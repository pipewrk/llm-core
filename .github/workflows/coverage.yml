name: CI + Release

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test & Coverage
    if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')  # skip on tag pushes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Cache Bun deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            .bun
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install
        run: bun install

      - name: Test (coverage)
        run: bun test --coverage --coverage-reporter=lcov

      - name: Upload coverage â†’ Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: jasonnathan/llm-core

      - name: Build
        run: bun run build

  release:
    name: Publish & GitHub Release (on tag)
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # make sure tag/refs are available

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      - name: Install
        run: bun install

      - name: Build
        run: bun run build

      - name: Extract version from tag
        id: v
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          # expect tags like v1.2.3; strip leading v if present
          CLEAN="${TAG#v}"
          echo "version=$CLEAN" >> "$GITHUB_OUTPUT"

      - name: Sync package.json version to tag (idempotent)
        id: syncver
        shell: bash
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          V_FROM_TAG="${TAG#v}"
          V_FROM_PKG=$(awk -F\" '/"version":/ {print $4; exit}' package.json)
          echo "tag=$V_FROM_TAG pkg=$V_FROM_PKG"
          if [ "$V_FROM_PKG" != "$V_FROM_TAG" ]; then
            npm version "$V_FROM_TAG" --no-git-tag-version
          else
            echo "package.json already matches tag; skipping."
          fi

      - name: Configure npm auth
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
        run: npm publish --access public

      - name: Create GitHub release (idempotent)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF##*/}"
          gh release view "$TAG" >/dev/null 2>&1 || \
          gh release create "$TAG" --title "$TAG" --notes "Automated release for $TAG"

      # NEW: archive dist so we don't pass directories to gh
      - name: Package dist as tar.gz
        run: |
          tar -czf "llm-core-${{ steps.v.outputs.version }}.tar.gz" -C dist .

      - name: Upload build artifacts to release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${GITHUB_REF##*/}" "llm-core-${{ steps.v.outputs.version }}.tar.gz" --clobber